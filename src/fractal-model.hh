#ifndef _MVC_FRACTAL_MODEL_
#define _MVC_FRACTAL_MODEL_
#include "model.hh"

/**
@file  fractal-model.hh
@brief Fractal model implements the cModel and exprots a lazy-evaluated infinite0depth sphere tree
The tree is generated by recursively applying set of transformations to an element;s local CS.
We use caching of the first several tousand elements generated. Although not the major bottleneck, the tree
is explored breadth-first, so these elememts are referenced in every new tree generation
Define _FV_CACHE_SIZE_ to override the defalut or set it to 0 to disable the cache
*/

#ifdef _NO_CXX_11_
#define override
#endif

namespace mvc
{
    ////////////////////////////////////////////////////////////////////
    /// \brief The Sphere Element class
    /// Represents the sphere model element
    ///
    class cSphere : public cElement
    {
    protected:
        /// \brief m_sRadius - the radius of tha sphere
        geom::scalar             m_sRadius;
        /// \brief m_plistSDescendands - the descendand elements cache
        utl::cObList<cElement*>* m_plistSDescendands;
    public:
        cSphere(); //!< Default
        virtual ~cSphere() override;    //!< Persorms cache cleanup
        // specific constructors
        cSphere( size_t nLevel, const geom::cMatrix3d& matCS, geom::scalar sR );//!< Constructs a sphere with a specific radius
        // overrided operations

        virtual geom::scalar GetBoundingSphereRadius()  const override ;
        virtual geom::scalar GetDescendantSphereRadius()  const override;
        // implementation - specific
        utl::cObList<cElement*>* GetDescendandsListPtr() ;  //!< Retrieves the descendants list. Nay return NULL result
        utl::cObList<cElement*>* MakeDescendandsListPtr() ; //!< Allocates and returns a new list
    };

    ////////////////////////////////////////////////////////////////////
    /// \brief The cFractalcModel class
    /// The fractal lazy-evaluated model for our spheres
    ///
    class cFractalcModel : public cModel
    {
    protected:
        size_t      m_nElementsProduced; //!< we cache produced object and keep track on their count
        cElement*   m_pRootElem;         //!< the root element is cached separately in this member
    public:

        cFractalcModel();
#ifndef _NO_CXX_11_
        cFractalcModel( const cFractalcModel& ) = delete; //!<< Prevent direct copy
#endif
        virtual ~cFractalcModel() override;
// operations
        virtual cElement* GetRootElement() override;
        virtual utl::cObList<cElement*> GetDescendantElements( cElement* ) override;

        virtual void Collect() override;
    protected:
        void CollectImpl();
        ////////////////////////////////////////////////////////////////////
        /// \brief m_lstElemetsProduced - the generated elements collection
        /// if we don't do internam memoty mnagement, we sill need to store the allocated objects pointers for GC
        utl::cObList<cElement*> m_lstElemetsProduced;
public:
    };
}


#endif
